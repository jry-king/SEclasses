#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Jin Ruiyang 516030910408
# Describe how and why you modified the baseline code.
# 1.Put 8 elements in one iteration to implement loop unrolling.
#   In this way I can decrease the overhead.
# 2.Use iaddq to add constant to src, dst and len instead of irmovq and addq.
#   In order to use one cycle to add constant instead of two.
# 3.Delete all andq used to judge len and move the operation on len to the beginning of iteration.
#   Since iaddq also change CC, use iaddq rather than andq to judge whether the remaining length is enough can save one instruction.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
    # judge length
Judge:
    iaddq $-8,%rdx      # len - 8
	jge Loop	        # if len >= 8, start the loop
    iaddq $4,%rdx       # len - 4
    jge Remain1         # if len >= 4, deal 4 remaining elements
Judge2:
    iaddq $2,%rdx      # len - 2
    jge Remain2         # if len >= 2, deal 2 remaining elements
Judge3:
    iaddq $2,%rdx       # now len = 0 or 1
    jg Remain3          # if len = 1, deal with the last element 
    ret
# len >= 8
Loop:	
    # read value from src and store it to dst
    mrmovq (%rdi),%r8
    mrmovq 8(%rdi),%r9
    mrmovq 16(%rdi),%r10
    mrmovq 24(%rdi),%r11
    mrmovq 32(%rdi),%r12
    mrmovq 40(%rdi),%r13
    mrmovq 48(%rdi),%r14
    mrmovq 56(%rdi),%rcx
    rmmovq %r8,(%rsi)
    rmmovq %r9,8(%rsi)
    rmmovq %r10,16(%rsi)
    rmmovq %r11,24(%rsi)
    rmmovq %r12,32(%rsi)
    rmmovq %r13,40(%rsi)
    rmmovq %r14,48(%rsi)
    rmmovq %rcx,56(%rsi)
    # count positive integer
	andq %r8, %r8		# val <= 0?
	jle Npos1		# if so, goto Npos1:
	iaddq $1, %rax		# count++
Npos1:
    andq %r9, %r9
    jle Npos2
    iaddq $1,%rax
Npos2:
    andq %r10, %r10
    jle Npos3
    iaddq $1, %rax
Npos3:
    andq %r11, %r11
    jle Npos4
    iaddq $1, %rax
Npos4:
    andq %r12, %r12
    jle Npos5
    iaddq $1, %rax
Npos5:
    andq %r13, %r13
    jle Npos6
    iaddq $1, %rax
Npos6:
    andq %r14, %r14
    jle Npos7
    iaddq $1, %rax
Npos7:
    andq %rcx, %rcx
    jle Npos 
    iaddq $1, %rax
Npos:
	iaddq $64, %rdi		# src++
	iaddq $64, %rsi		# dst++
	jmp Judge
# 4 <= len < 8
Remain1:
    mrmovq (%rdi),%r8
    mrmovq 8(%rdi),%r9
    mrmovq 16(%rdi),%r10
    mrmovq 24(%rdi),%r11
    rmmovq %r8,(%rsi)
    rmmovq %r9,8(%rsi)
    rmmovq %r10,16(%rsi)
    rmmovq %r11,24(%rsi)
    andq %r8,%r8
    jle Npos10
    iaddq $1,%rax
Npos10:
    andq %r9,%r9
    jle Npos11
    iaddq $1,%rax
Npos11:
    andq %r10,%r10
    jle Npos12
    iaddq $1,%rax
Npos12:
    andq %r11,%r11
    jle Npos13
    iaddq $1,%rax
Npos13:
    iaddq $32, %rdi
    iaddq $32, %rsi
    iaddq $-4,%rdx      # len - 4, so after jumping to Judge2 we can add 2 to len to create len - 2
    jmp Judge2
# 2 <= len < 4
Remain2:
    mrmovq (%rdi),%r8
    mrmovq 8(%rdi),%r9
    rmmovq %r8,(%rsi)
    rmmovq %r9,8(%rsi)
    andq %r8,%r8
    jle Npos20
    iaddq $1,%rax
Npos20:
    andq %r9,%r9
    jle Npos21
    iaddq $1,%rax
Npos21:
    iaddq $16, %rdi
    iaddq $16, %rsi
    iaddq $-2, %rdx     # len - 2, so after jumping to Judge3 we can add 2 to len to restore it
    jmp Judge3
# len = 1
Remain3:
    mrmovq (%rdi),%r8
    andq %r8,%r8
    rmmovq %r8,(%rsi)
    jle Npos30
    iaddq $1,%rax
Npos30:
    ret
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
